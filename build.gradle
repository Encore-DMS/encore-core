// For JUnit5, see http://junit.org/junit5/docs/current/user-guide/#running-tests-build
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.3.2'
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.unbroken-dome.test-sets'

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.7'
    compile 'org.apache.logging.log4j:log4j-core:2.7'
    compile 'org.hibernate:hibernate-entitymanager:5.2.7.Final'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    compile 'com.h2database:h2:1.4.193'
    compile 'com.google.inject:guice:4.1.0'
    compile 'com.google.inject.extensions:guice-assistedinject:4.1.0'
    compile 'com.google.guava:guava:21.0'
    compile files('lib/query-builder-1.0-SNAPSHOT.jar')
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M3'
    testCompile 'org.mockito:mockito-core:2.6.4'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M3'
}

testSets {
    integrationTest { dirName = 'integration-test' }
}

// Ensure that the check task fails the build if there are failing integration tests
check.dependsOn integrationTest

// Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

// Ensure that the HTML reports of unit and integration tests are written to different directories
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}